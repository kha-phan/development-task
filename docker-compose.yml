version: '3.8'

services:
  web:
    build: .
    container_name: fastapi-web
    restart: always
    ports:
      - "3000:3000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=travel_recommendations
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 10

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 30s
      retries: 10

  mongo:
    image: mongo:4.4.3
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example

    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  kafka_worker:
    build: .
    container_name: kafka_worker
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    command: ["python", "app/workers/kafka_consumer.py"]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=travel_recommendations
      - OPENAI_API_KEY=${OPENAI_API_KEY}
